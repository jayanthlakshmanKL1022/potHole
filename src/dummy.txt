import React from "react";
import { RouteComponentProps } from "@reach/router";
const Profile: React.FC<RouteComponentProps> = () => {   
    return (
        <div>
            <h1>New Profile</h1>
            <p>Welcome to the profile page!</p>
        </div>
    );
};
export default Profile;



    <Link to="/newuser">newjoinpage</Link>
    <Link to="/profile">profile</Link>



    import express, { Express, Request, Response } from "express";
import dotenv from "dotenv";
import cors from "cors";
import mongoose from "mongoose";
import { Server } from "socket.io";
import http from "http";

// Import routes
import login from "./routes/Authentication/login";
import search from "./routes/Search/search";
import removeFromGroup from "./routes/removeFromGroup/removeFromGroup";
import fetchChats from "./routes/fetchChats/fetchChats";
import creategroup from "./routes/createGroupchat/groupchat";
import addTogroup from "./routes/addTogroup/addToGroup";
import chatrouter from "./routes/AccessChat/accessChat";
import rename from "./routes/createGroupchat/renamegroupchat";
import sendmessage from "./routes/sendMessage/sendMessage";
import fetchMessages from "./routes/fetchMessage/fetchMessage";
import myprofile_details from "./routes/myProfile/getProfile";
import update_profile from "./routes/myProfile/updateProfile";

dotenv.config();

const app: Express = express();
const port = process.env.PORT || 5500;
const dbURI = process.env.STRING;

if (!dbURI) {
  console.error("‚ùå Database connection string is missing in .env file");
  process.exit(1);
}


mongoose
  .connect(dbURI)
  .then(() => console.log("‚úÖ Connected to MongoDB"))
  .catch((error) => console.error("‚ùå Connection error:", error));


const server = http.createServer(app);


const io = new Server(server, {
  cors: {
    origin: "http://localhost:5173",
    methods: ["GET", "POST"],
  },
});

// ‚úÖ Middleware
app.use(cors());
app.use(express.json());

// ‚úÖ Routes
app.use("/auth", login);
app.use("/find", search);
app.use("/remove", removeFromGroup);
app.use("/fetch_c", fetchChats);
app.use("/create", creategroup);
app.use("/add", addTogroup);
app.use("/createchat", chatrouter);
app.use("/name", rename);
app.use("/send", sendmessage);
app.use("/fetch", fetchMessages);
app.use("/myprofile", myprofile_details);
app.use("/update", update_profile);


let onlineUsers = new Map<string, string>();


io.on("connection", (socket) => {
  console.log(`üîµ User connected: ${socket.id}`);

  // When a user joins
  socket.on("userConnected", (userId: string | null) => {
    if (userId) {
      onlineUsers.set(userId, socket.id);
      io.emit("updateOnlineUsers", Array.from(onlineUsers.keys())); // Notify all users
      console.log(`üü¢ ${userId} is online.`);
    }
  });

  // When a user disconnects
  socket.on("disconnect", () => {
    console.log(`üî¥ User disconnected: ${socket.id}`);
    
    let disconnectedUserId: string | null = null;
    onlineUsers.forEach((value, key) => {
      if (value === socket.id) {
        disconnectedUserId = key;
        onlineUsers.delete(key);
      }
    });

    if (disconnectedUserId) {
      console.log(`üîò ${disconnectedUserId} went offline.`);
      io.emit("updateOnlineUsers", Array.from(onlineUsers.keys())); // Notify all users
    }
  });
});


server.listen(port, () => {
  console.log(`üöÄ Server running on port ${port}`);
});


app.get("/", (req: Request, res: Response) => {
  res.send("Express + TypeScript Server is running! üöÄ");
});










import React, { useState, useEffect } from "react";
import axios from "axios";
import Search from "./component/Search";
import Navbar from "./component/navbar";
import "./home.css";
import { RouteComponentProps } from "@reach/router";
import { io } from "socket.io-client";

interface Chat {
  _id: string;
  chatName: string;
}

interface Message {
  _id: string;
  sender: string;
  content: string;
}

const ENDPOINT = "http://localhost:5500";


const ChatApp: React.FC<RouteComponentProps> = () => {

  const [chats, setChats] = useState<Chat[]>([]);
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [newChatName, setNewChatName] = useState<string>("");
  const [selectedChatId, setSelectedChatId] = useState<string | null>(null);

  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState<string>("");
  const [id, setMyId] = useState<string>("");
  const [name, setName] = useState<string>("");
  const [user, setUser] = useState<any>();

  const [socket, setSocket] = useState<any>(null);
  var Socket;

  useEffect(() => {
    const fetchDetails = async () => {
      try {
        const token = localStorage.getItem("authToken");
        const response = await axios.get("http://localhost:5500/myprofile/mydetails", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setUser(response.data);
        setMyId(response.data._id);
        const fullName = `${response.data.firstName} ${response.data.lastName}`;
        setName(fullName);
      } catch (error) {
        console.error("Error fetching details:", error);
      }
    };
    fetchDetails();
  }, []);

  useEffect(() => {
    if (user && user._id) {
      const newSocket = io(ENDPOINT);
      setSocket(newSocket);  
      newSocket.on("connect", () => {
        console.log("Connected to server");
        newSocket.emit("setup", user._id);
        newSocket.on("connected!", () => {
          console.log(`User with ID ${user._id} successfully connected.`);
        });
      });
      return () => {
        newSocket.disconnect(); 
      };
    }
  }, [user]);
  


  useEffect(() => {
    if (socket) {
      socket.on("messagereceived", (message: Message) => {
        setMessages((prevMessages) => [...prevMessages, message]);
      });
    }
    return () => {
      if (socket) {
        socket.off("messagereceived");
      }
    };
  }, [socket]);

  const fetchChats = async () => {
    try {
      const token = localStorage.getItem("authToken");
      if (!token) return console.error("No auth token found");

      const response = await axios.get("http://localhost:5500/fetch_c/mychats", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setChats(response.data);
    } catch (error) {
      console.error("Error fetching chats:", error);
    }
  };
  
  const fetchMessages = async (chatId: string) => {
    try {
      const token = localStorage.getItem("authToken");
      const response = await axios.get(`http://localhost:5500/fetch/fetchmessages/${chatId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setMessages(response.data.messages || []);
      socket.emit("joinchat", id); 
    } catch (error) {
      console.error("Error fetching messages:", error);
      setMessages([]); 
    }
  };

  useEffect(() => {
    fetchChats();
  }, []);

  useEffect(() => {
    if (selectedChatId) {
      fetchMessages(selectedChatId);
    }
  }, [selectedChatId]);

  const createChat = async (userId: string) => {
    if (!userId) return;
    try {
      const token = localStorage.getItem("authToken");
      const response = await axios.post(
        "http://localhost:5500/createchat/accesschat",
        { userId },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );
      setChats((prevChats) => [...prevChats, response.data]);
    } catch (error) {
      console.error("Error creating chat:", error);
    }
  };
  
  // Send a new message
  const sendMessage = async () => {
    if (!newMessage || !selectedChatId) return;
    try {
      const token = localStorage.getItem("authToken");
      const response = await axios.post(
        "http://localhost:5500/send/sendmessage",
        { chatId: selectedChatId, content: newMessage },
        {
          headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
        }
      );
      setMessages((prevMessages) => [...prevMessages, response.data]);
      socket.emit("newmessage", {
        chatId: selectedChatId,
        message: response.data,
      });
      setNewMessage("");
    } catch (error) {
      console.error("Error sending message:", error);
    }
  };


  // Rename the selected chat
  const renameChat = async () => {
    if (!selectedChatId || !newChatName) return;
    try {
      await axios.post("http://localhost:5500/name/rename", {
        chatId: selectedChatId,
        newChatName,
      });
      fetchChats(); // Refresh the chat list
    } catch (error) {
      console.error("Error renaming chat:", error);
    }
  };
  return (
    <div className="page-reset">
      <div className="container">
        <div className="left">
          <Navbar />
        </div>
        <div className="center">
          <b>
            <p style={{ color: "white", fontSize: "21px", marginBottom: "20px" }}>
              Direct Messages
            </p>
          </b>
          <div className="search-container">
            <Search setUsers={setSearchResults} />
            <ul className="dropdown">
              {searchResults.map((user) => (
                <li key={user._id}>
                  {user.firstName && user.lastName && `${user.firstName} ${user.lastName}` !== name && (
                    <p style={{ color: "black" }}>{user.firstName} {user.lastName}</p>
                  )}
                  <button onClick={() => createChat(user._id)}>Create Chat</button>
                </li>
              ))}
            </ul>
          </div>
          <h2 style={{ marginTop: "20px" }}>My Chats</h2>
          <ul>
  {chats.map((chat) => {
    const chatNameParts = chat.chatName.split(", "); // Split by comma and space
    const loggedInFullName = name 
    const otherUserName = chatNameParts.find(n => n !== loggedInFullName) || chatNameParts[0]; // Find the other user's name

    return (
      <li key={chat._id} onClick={() => setSelectedChatId(chat._id)} style={{ cursor: "pointer", listStyle: "none" }}>
        <p >{otherUserName}</p>
      </li>
    );
  })}
</ul>

          {selectedChatId && (
            <div>
              <input
                type="text"
                placeholder="New Chat Name"
                value={newChatName}
                onChange={(e) => setNewChatName(e.target.value)}
              />
              <button onClick={renameChat}>Rename Chat</button>
            </div>
          )}
        </div>
        <div className="right">
  {selectedChatId ? (
    <div className="chat-container">
      {/* Find the chat object for the selected chatId */}
      {(() => {
        const selectedChat = chats.find((chat) => chat._id === selectedChatId);
        if (!selectedChat) return <h2>Chat</h2>;

        const chatNameParts = selectedChat.chatName.split(", ");
        const otherUserName = chatNameParts.find(n => n !== name) || chatNameParts[0]; 

        return <h2>{otherUserName}</h2>;
      })()}
      <hr style={{marginTop:'10px'}}></hr>
              <div className="messages">
                {messages.map((msg) => (
                  <div key={msg._id} className={msg.sender === id ? "sent-message" : "received-message"}>
                    {msg.content}
                  </div>
                ))}
              </div>
              <div className="message-input-container">
                <button className="icon-button">üìé</button>
                <input
                  type="text"
                  placeholder="Type a message..."
                  value={newMessage} 
                  onChange={(e) => setNewMessage(e.target.value)}
                  className="chat-input"
                />
                  <button className="send-button" onClick={sendMessage}>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            fill="white"
          >
            <path d="M2 21l21-9L2 3v7l15 2-15 2v7z" />
          </svg>
        </button>
              </div>
            </div>
          ) : (
            <p>Select a chat to start messaging</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default ChatApp;

